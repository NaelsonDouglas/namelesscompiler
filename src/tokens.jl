using DataStructures
using JSON
@enum Tokens CT_VALUE=1 CT_INT CT_CHAR CT_FLOAT CT_VEC SMCL EPS ID CONST EXPR0 OPR_PM1 OPR_DM2 OPRLN3 OPRLR_EQ4 OPRLR_LG5 OPRLR_LGEQ6 FN_PRINT7 FN_READ8 DRED9 BLK_IF0 BLK_ELS1 BLK_FOR2 BLK_WHILE3 COMMA4 O_BRCKT5 C_BRCKT6 O_C_BRCKT7 C_C_BRCKT8 O_PRTSIS9 C_PRTSIS0 OPR_ATR1 IDT_INT2 IDT_FLOAT3 IDT_CHAR4 IDT_STRING5 FN_MAIN6 VEC_IN7 LEX_ERR8 OPR_SUM9 OPR_SUB0 CTN1 PARAMS_Tk2 IDT_BOOL3 EXP_BOOL4 VOID5 FN_DCLR6 FN_CALL_TK7 CT_STRING8 OPR_CONCAT9 OPR_UN_NEG0 OPRLR_GT1 RETURN2 OPRLR_GEQ3 OPRLR_LGEQ4 OPR_CONCAT5 OPRLR_AND6 OPRLR_OR7 OPRL_NOT8 CTB9 CMNT_LN0 CONTINUE1 BREAK2 OPRLR_DIF3 EOF4 CT_STR5


dicTokens = SortedDict{Int,String}()

for tk in instances(Tokens)
	dicTokens[Int(tk)] = string(tk)
end

f = open("tks.json","w+")
write(f,String(JSON.json(dicTokens)))
flush(f)
close(f)




#=
Tokens = [

CT_VALUE=1
CT_INT=2
CT_CHAR=3
CT_FLOAT=4
CT_VEC=5

SMCL=6
EPS=7
ID=8
CONST=9
EXPR=10
OPR_PM=11
OPR_DM=12
OPRLN=13
OPRLR_EQ=14
OPRLR_LG=15
OPRLR_LGEQ=16

FN_PRINT=17
FN_READ=18
DRED=19

BLK_IF=20
BLK_ELS=21
BLK_FOR=22
BLK_WHILE=23

COMMA=24

O_BRCKT=25
C_BRCKT=26

O_C_BRCKT=27
C_C_BRCKT=28

O_PRTSIS=29
C_PRTSIS=30

OPR_ATR=31
IDT_INT=32
IDT_FLOAT=33
IDT_CHAR=34
IDT_STRING=35
FN_MAIN=36
VEC_IN=37
LEX_ERR=38
OPR_SUM=39
OPR_SUB=40
CTN=41
PARAMS_Tk=42
IDT_BOOL=43
EXP_BOOL=44
VOID=45
FN_DCLR=46
FN_CALL_TK=47
CT_STRING=48
OPR_CONCAT=49
OPR_UN_NEG=50
OPRLR_GT=51
RETURN=52

OPRLR_GEQ=53
OPRLR_LGEQ=54
OPR_CONCAT=55
OPRLR_AND=56
OPRLR_OR=57
OPRL_NOT=58
CTB=59
CMNT_LN=60

CONTINUE=61
BREAK=62

OPRLR_DIF=63
EOF=64
CT_STR=65
]
#https://github.com/JuliaLang/julia/blob/d386e40c17d43b79fc89d3e579fc04547241787c/base/Enums.jl#L31-L51
=#